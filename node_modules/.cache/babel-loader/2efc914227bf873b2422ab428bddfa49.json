{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\ar2r1\\\\Desktop\\\\React.JS\\\\0.2 NODE JS\\\\counter-app\\\\src\\\\Counter.js\";\nimport React, { Component } from 'react';\nimport './Counter.css';\nimport Display from './Display';\nimport ButtonsPanel from './ButtonsPanel'; // import Clock from './Clock';\n\nimport ClockFunctional from './ClockFunctional';\nimport Step from './Step';\n\nclass Counter extends Component {\n  constructor(props) {\n    super(props);\n\n    this.addValue = action => {\n      this.setState((prevState, prevProps) => {\n        let currentCounterValue = prevState.counterValue;\n\n        if (action === 'add') {\n          currentCounterValue += this.state.stepValue;\n        } else if (action === 'reinit') {\n          currentCounterValue = prevProps.initValue;\n        } else {\n          currentCounterValue = 0;\n        }\n\n        return {\n          counterValue: currentCounterValue\n        };\n      });\n    };\n\n    this.toggleClock = () => {\n      this.setState(prevstate => {\n        return {\n          showClock: !prevstate.showClock\n        };\n      });\n    };\n\n    this.setStepOnInput = value => {\n      this.setState({\n        stepValue: parseFloat(value)\n      });\n    };\n\n    this.initStateValue = 10;\n    this.state = {\n      counterValue: this.initStateValue,\n      showClock: true,\n      stepValue: 5\n    };\n  }\n\n  render() {\n    let clockElement = '';\n\n    if (this.state.showClock == true) {\n      // clockElement = <Clock toggleClockMethod={this.toggleClock}/>\n      clockElement = /*#__PURE__*/_jsxDEV(ClockFunctional, {\n        toggleClockMethod: this.toggleClock\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 28\n      }, this);\n    } else {\n      clockElement = /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"show-clock\",\n        onClick: this.toggleClock,\n        children: \"show clock\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 28\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"counter\",\n        children: [/*#__PURE__*/_jsxDEV(Display, {\n          displayValue: this.state.counterValue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ButtonsPanel, {\n          buttonMethod: this.addValue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ButtonsPanel, {\n          buttonMethod: this.addValue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Step, {\n          stepMethod: this.setStepOnInput\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this), clockElement]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this); // setStepMethod={this.setStepOnInput}\n  }\n\n}\n\nexport default Counter;","map":{"version":3,"sources":["C:/Users/ar2r1/Desktop/React.JS/0.2 NODE JS/counter-app/src/Counter.js"],"names":["React","Component","Display","ButtonsPanel","ClockFunctional","Step","Counter","constructor","props","addValue","action","setState","prevState","prevProps","currentCounterValue","counterValue","state","stepValue","initValue","toggleClock","prevstate","showClock","setStepOnInput","value","parseFloat","initStateValue","render","clockElement"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAO,eAAP;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,YAAP,MAAyB,gBAAzB,C,CACA;;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAEA,MAAMC,OAAN,SAAsBL,SAAtB,CAAgC;AAE5BM,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAEf,UAAMA,KAAN;;AAFe,SAenBC,QAfmB,GAePC,MAAD,IAAY;AAEnB,WAAKC,QAAL,CAAe,CAACC,SAAD,EAAYC,SAAZ,KAA0B;AACrC,YAAIC,mBAAmB,GAAGF,SAAS,CAACG,YAApC;;AAEA,YAAGL,MAAM,KAAK,KAAd,EAAqB;AACjBI,UAAAA,mBAAmB,IAAI,KAAKE,KAAL,CAAWC,SAAlC;AACH,SAFD,MAEO,IAAGP,MAAM,KAAK,QAAd,EAAwB;AAC3BI,UAAAA,mBAAmB,GAAGD,SAAS,CAACK,SAAhC;AACH,SAFM,MAEA;AACHJ,UAAAA,mBAAmB,GAAG,CAAtB;AACH;;AAED,eAAO;AACHC,UAAAA,YAAY,EAAED;AADX,SAAP;AAGH,OAdD;AAeH,KAhCkB;;AAAA,SAkCnBK,WAlCmB,GAkCL,MAAM;AAChB,WAAKR,QAAL,CAAiBS,SAAD,IAAe;AAC3B,eAAO;AACHC,UAAAA,SAAS,EAAE,CAACD,SAAS,CAACC;AADnB,SAAP;AAGH,OAJD;AAKH,KAxCkB;;AAAA,SA0CnBC,cA1CmB,GA0CDC,KAAD,IAAW;AACxB,WAAKZ,QAAL,CAAc;AACVM,QAAAA,SAAS,EAAEO,UAAU,CAACD,KAAD;AADX,OAAd;AAGH,KA9CkB;;AAGf,SAAKE,cAAL,GAAsB,EAAtB;AAEA,SAAKT,KAAL,GAAa;AACTD,MAAAA,YAAY,EAAE,KAAKU,cADV;AAETJ,MAAAA,SAAS,EAAE,IAFF;AAGTJ,MAAAA,SAAS,EAAE;AAHF,KAAb;AAMH;;AAqCDS,EAAAA,MAAM,GAAG;AAEL,QAAIC,YAAY,GAAG,EAAnB;;AAEA,QAAI,KAAKX,KAAL,CAAWK,SAAX,IAAwB,IAA5B,EAAkC;AAC9B;AACAM,MAAAA,YAAY,gBAAG,QAAC,eAAD;AAAiB,QAAA,iBAAiB,EAAE,KAAKR;AAAzC;AAAA;AAAA;AAAA;AAAA,cAAf;AACH,KAHD,MAGO;AACHQ,MAAAA,YAAY,gBAAG;AAAM,QAAA,SAAS,EAAC,YAAhB;AAA6B,QAAA,OAAO,EAAE,KAAKR,WAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAf;AACH;;AAED,wBACI;AAAA,6BACI;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA,gCACI,QAAC,OAAD;AAAS,UAAA,YAAY,EAAE,KAAKH,KAAL,CAAWD;AAAlC;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,YAAD;AAAc,UAAA,YAAY,EAAE,KAAKN;AAAjC;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI,QAAC,YAAD;AAAc,UAAA,YAAY,EAAE,KAAKA;AAAjC;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAII,QAAC,IAAD;AAAM,UAAA,UAAU,EAAE,KAAKa;AAAvB;AAAA;AAAA;AAAA;AAAA,gBAJJ,EAKKK,YALL;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ,CAXK,CAsBL;AACH;;AAzE2B;;AAiFhC,eAAerB,OAAf","sourcesContent":["import React, {Component} from 'react';\r\nimport './Counter.css';\r\nimport Display from './Display';\r\nimport ButtonsPanel from './ButtonsPanel';\r\n// import Clock from './Clock';\r\nimport ClockFunctional from './ClockFunctional';\r\nimport Step from './Step';\r\n\r\nclass Counter extends Component {\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n        this.initStateValue = 10;\r\n\r\n        this.state = {\r\n            counterValue: this.initStateValue,\r\n            showClock: true,\r\n            stepValue: 5\r\n        }\r\n\r\n    }\r\n\r\n    \r\n\r\n    addValue = (action) => {\r\n        \r\n        this.setState( (prevState, prevProps) => {\r\n            let currentCounterValue = prevState.counterValue;\r\n\r\n            if(action === 'add') {\r\n                currentCounterValue += this.state.stepValue;\r\n            } else if(action === 'reinit') {\r\n                currentCounterValue = prevProps.initValue;\r\n            } else {\r\n                currentCounterValue = 0;\r\n            }\r\n\r\n            return({\r\n                counterValue: currentCounterValue\r\n            });\r\n        });\r\n    }\r\n\r\n    toggleClock = () => {\r\n        this.setState ( (prevstate) => {\r\n            return({\r\n                showClock: !prevstate.showClock\r\n            })\r\n        })\r\n    }\r\n\r\n    setStepOnInput = (value) => {\r\n        this.setState({\r\n            stepValue: parseFloat(value),\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n        let clockElement = '';\r\n\r\n        if (this.state.showClock == true) {\r\n            // clockElement = <Clock toggleClockMethod={this.toggleClock}/>\r\n            clockElement = <ClockFunctional toggleClockMethod={this.toggleClock} />\r\n        } else {\r\n            clockElement = <span className='show-clock' onClick={this.toggleClock}>show clock</span>\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='counter'>\r\n                    <Display displayValue={this.state.counterValue} />\r\n                    <ButtonsPanel buttonMethod={this.addValue}/>\r\n                    <ButtonsPanel buttonMethod={this.addValue}/>\r\n                    <Step stepMethod={this.setStepOnInput}/>\r\n                    {clockElement}\r\n                </div>\r\n            </div>\r\n        )\r\n        // setStepMethod={this.setStepOnInput}\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default Counter;"]},"metadata":{},"sourceType":"module"}